import vt

from ..classes.config import SECRET_CONSTANTS, Constants

#client = vt.Client(SECRET_CONSTANTS.virus_total_api_key)

import requests
import argparse
import os
import time
import json
from pathlib import Path

# enter your private key here from virus total
key =  "38c92a28ccedbc04b489b8e61afbe1bff31f669a048e914813aa01694efb426d"

# validate hash passed by user by checking its length

def checkhash(hsh):
        try:
                if len(hsh) == 32:
                        return hsh
                elif len(hsh) == 40:
                        return hsh
                elif len(hsh) == 64:
                        return hsh
                else:
                        print ("The Hash input does not appear valid.")
                        exit()
        except Exception:
                        print ('There is something wrong with your hash \n' + Exception)

#
# def main():
#         parser = argparse.ArgumentParser(description="Virus Total Hash Check")
#         parser.add_argument('-o', '--output', required=True, help='Output File Location EX: /Home/Desktop/output.txt ')
#         parser.add_argument('-H', '--hash', type=checkhash, required=False, help='Single Hash EX: d41d8cd98f00b204e9800998ecf8427e')
#         parser.add_argument('-u', '--unlimited', action='store_const', const=1, required=False, help='Changes the 26 second sleep timer to 1.')
#         args = parser.parse_args()
#
#         #fixed output for later
#         #parser.add_argument('-o', '--output', required=True, default='InfoSecurity-TomTomLoad\tomtomload\static\malwarelogs')
#
#         #Run for hash + key
#         if args.hash and key:
#                 file = open(args.output,'w+')
#                 file.write('\n\nBelow is the identified malicious hash.\n\n')
#                 file.close()
#
#                 #outputfile = InfoSecurity-TomTomLoad\tomtomload\static\malwarelogs
#                 #output = os.path.join(malwarelogs, 'log.txt')
#                 VT_Request(key, args.hash.rstrip(), args.output)
#
#         #when upload hash thing is done, just leave the vt_request call with the hash value & api key and fixed output
#         #VT_Request(key
#


def malwareAnalysis(originalhash):
        checkhash(originalhash)

        output = Constants.TTL_MALWARELOGS_FOLDER
        outputfile = os.path.join(output, 'test.txt')
        #Run for hash + key
        if originalhash and key:
                file = open(outputfile,'w+')
                file.write('\n\nBelow is the identified malicious hash.\n\n')
                file.close()

                code = VT_Request(key, originalhash, outputfile)
                print("VT_Request =", code)
                return code


def VT_Request(key, hash, output):
        params = {'apikey': key, 'resource': hash}
        url = requests.get('https://www.virustotal.com/vtapi/v2/file/report', params=params)
        json_response = url.json()
        x = str(json_response)
        x = x.replace("'", '"')
        x = x.replace("False", '"False"')
        x = x.replace("True", '"True"')
        x = x.replace("None", '"None"')

        parsed = json.loads(x)
        y =json.dumps(parsed, indent = 4, sort_keys=True)

        #make output so that instead of creating new file, just append to existing file. or if no file, create one (later)


        print ("\n")
        response = int(json_response.get('response_code'))
        if response == 0:
                #print (str(y) + "\n\n" + str(hash) + ' is not in Virus Total')
                file = open(output,'a+')
                file.write(str(y) + "\n\n" + str(hash) + ' is not in Virus Total')
                file.write('\n')
                file.close()
                return response
        elif response == 1:
                positives = int(json_response.get('positives'))
                if positives == 0:
                        #print (str(y) + "\n\n" + str(hash) + ' is not malicious')
                        file = open(output,'a+')
                        file.write(str(y) + "\n\n" + str(hash) + ' is not malicious')
                        file.write('\n')
                        file.close()
                        response = 0
                        return response
                else:
                        #print (str(y) + "\n\n" + str(hash) + ' is malicious')
                        file = open(output,'a+')
                        file.write(str(y) + "\n\n" + str(hash) + ' is a malicious hash. Hit Count:' + str(positives))
                        file.write('\n')
                        file.close()
                        return positives
        else:
                print (str(y) + "\n\n" + str(hash) + ' could not be searched. Please try again later.')
                response = 0
                return response


# running the program
if __name__ == '__main__':
        malwareAnalysis()
        #main

#py3 malware_analyis.py -H hash -o C:\lalala\ISPJ\InfoSecurity-TomTomLoad\tomtomload\static\malwarelogs
